// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String   @unique
  password        String
  username        String?  @unique
  profileName     String?
  description     String?
  profilePictureUrl String?
  role            Role?
  battingHand     BattingHand?
  bowlingStyle    BowlingStyle?
  profileComplete Boolean  @default(false)
  createdAt       DateTime @default(now())

  // Relations
  careerStats     CareerStats?
  captainOfTeams  Team[]       @relation("TeamCaptain")
  viceCaptainOfTeams Team[]    @relation("TeamViceCaptain")
  teamMemberships TeamMember[]
  sentInvitations TeamInvitation[] @relation("InvitationSender")
  receivedInvitations TeamInvitation[] @relation("InvitationReceiver")
  matches         Match[]
  teamMatchStats  TeamMatchPlayer[]
  topRunScorerFor TeamStatistics[] @relation("TopRunScorer")
  topWicketTakerFor TeamStatistics[] @relation("TopWicketTaker")
  bestStrikeRateFor TeamStatistics[] @relation("BestStrikeRate")
  bestEconomyFor  TeamStatistics[] @relation("BestEconomy")
  mostManOfTheMatchFor TeamStatistics[] @relation("MostManOfTheMatch")
  createdLocalMatches LocalMatch[]
  spectatorOf     MatchSpectator[]
  addedSpectators MatchSpectator[] @relation("SpectatorAddedBy")
  matchSummariesAsManOfTheMatch MatchSummary[] @relation("MatchSummaryManOfTheMatch")
  playerMatchHistory PlayerMatchHistory[]

  @@map("users")
}

model CareerStats {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  userId         String  @unique @db.ObjectId
  matchesPlayed  Int     @default(0)
  // Batting stats
  totalRuns      Int     @default(0)
  ballsFaced     Int     @default(0)
  strikeRate     Float   @default(0)
  highestScore   Int     @default(0)
  timesOut       Int     @default(0)
  // Bowling stats
  oversBowled    Float   @default(0)
  runsConceded   Int     @default(0)
  wicketsTaken   Int     @default(0)
  economy        Float   @default(0)
  bestBowlingWickets Int @default(0)
  bestBowlingRuns    Int @default(0)
  // Fielding stats
  catchesTaken   Int     @default(0)
  runOuts        Int     @default(0)
  // Achievement stats
  manOfTheMatchAwards Int @default(0)
  updatedAt      DateTime @default(now()) @updatedAt

  // Relations
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("career_stats")
}

model Team {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  captainId      String   @db.ObjectId
  viceCaptainId  String?  @db.ObjectId
  createdAt      DateTime @default(now())

  // Relations
  captain        User     @relation("TeamCaptain", fields: [captainId], references: [id])
  viceCaptain    User?    @relation("TeamViceCaptain", fields: [viceCaptainId], references: [id])
  members        TeamMember[]
  invitations    TeamInvitation[]
  homeMatches    TeamMatch[] @relation("HomeTeam")
  awayMatches    TeamMatch[] @relation("AwayTeam")
  statistics     TeamStatistics?
  teamMatchPlayers TeamMatchPlayer[]
  localMatchesAsMyTeam LocalMatch[] @relation("LocalMatchMyTeam")
  localMatchesAsOpponentTeam LocalMatch[] @relation("LocalMatchOpponentTeam")
  matchSummariesAsHomeTeam MatchSummary[] @relation("MatchSummaryHomeTeam")
  matchSummariesAsAwayTeam MatchSummary[] @relation("MatchSummaryAwayTeam")
  playerMatchHistoryRecords PlayerMatchHistory[] @relation("PlayerMatchHistoryTeam")

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId   String   @db.ObjectId
  userId   String   @db.ObjectId
  joinedAt DateTime @default(now())

  // Relations
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model TeamInvitation {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  teamId      String            @db.ObjectId
  invitedBy   String            @db.ObjectId
  invitedUser String            @db.ObjectId
  status      InvitationStatus  @default(PENDING)
  createdAt   DateTime          @default(now())

  // Relations
  team        Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  inviter     User              @relation("InvitationSender", fields: [invitedBy], references: [id])
  invited     User              @relation("InvitationReceiver", fields: [invitedUser], references: [id])

  @@map("team_invitations")
}

model Match {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  opponent     String
  matchDate    DateTime
  // Batting performance
  runsScored   Int
  ballsFaced   Int
  wasDismissed Boolean  @default(false)
  // Bowling performance
  oversBowled  Float
  runsConceded Int
  wicketsTaken Int
  // Fielding performance
  catchesTaken Int
  runOuts      Int      @default(0)
  // Achievement tracking
  isManOfTheMatch Boolean @default(false)
  createdAt    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("matches")
}

enum Role {
  BATSMAN     @map("batsman")
  BOWLER      @map("bowler")
  ALL_ROUNDER @map("all-rounder")
}

enum BattingHand {
  RIGHT @map("right")
  LEFT  @map("left")
}

enum BowlingStyle {
  FAST        @map("fast")
  MEDIUM_FAST @map("medium-fast")
  SPIN        @map("spin")
}

model TeamMatch {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  homeTeamId   String   @db.ObjectId
  awayTeamId   String   @db.ObjectId
  matchDate    DateTime
  venue        String
  status       MatchStatus @default(COMPLETED)
  result       MatchResult? // null if match is ongoing/not completed
  // Team scores
  homeTeamRuns Int      @default(0)
  homeTeamWickets Int   @default(0)
  homeTeamOvers Float   @default(0)
  awayTeamRuns Int      @default(0)
  awayTeamWickets Int   @default(0)
  awayTeamOvers Float   @default(0)
  createdAt    DateTime @default(now())

  // Relations
  homeTeam     Team     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam     Team     @relation("AwayTeam", fields: [awayTeamId], references: [id])
  playerStats  TeamMatchPlayer[]

  @@map("team_matches")
}

model TeamMatchPlayer {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  teamMatchId  String   @db.ObjectId
  userId       String   @db.ObjectId
  teamId       String   @db.ObjectId
  // Batting performance
  runsScored   Int      @default(0)
  ballsFaced   Int      @default(0)
  wasDismissed Boolean  @default(false)
  // Bowling performance
  oversBowled  Float    @default(0)
  runsConceded Int      @default(0)
  wicketsTaken Int      @default(0)
  // Fielding performance
  catchesTaken Int      @default(0)

  // Relations
  teamMatch    TeamMatch @relation(fields: [teamMatchId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id])
  team         Team      @relation(fields: [teamId], references: [id])

  @@unique([teamMatchId, userId])
  @@map("team_match_players")
}

model TeamStatistics {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId         String   @unique @db.ObjectId
  // Match statistics
  matchesPlayed  Int      @default(0)
  matchesWon     Int      @default(0)
  matchesLost    Int      @default(0)
  matchesDrawn   Int      @default(0)
  winRatio       Float    @default(0)
  // Top performers
  topRunScorerId String?  @db.ObjectId
  topRunScorerRuns Int    @default(0)
  topWicketTakerId String? @db.ObjectId
  topWicketTakerWickets Int @default(0)
  // Best averages
  bestStrikeRatePlayerId String? @db.ObjectId
  bestStrikeRate Float    @default(0)
  bestEconomyPlayerId String?  @db.ObjectId
  bestEconomy    Float    @default(0)
  // Man of the match tracking
  mostManOfTheMatchPlayerId String? @db.ObjectId
  mostManOfTheMatchAwards Int @default(0)
  updatedAt      DateTime @default(now()) @updatedAt

  // Relations
  team           Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  topRunScorer   User?    @relation("TopRunScorer", fields: [topRunScorerId], references: [id])
  topWicketTaker User?    @relation("TopWicketTaker", fields: [topWicketTakerId], references: [id])
  bestStrikeRatePlayer User? @relation("BestStrikeRate", fields: [bestStrikeRatePlayerId], references: [id])
  bestEconomyPlayer User?    @relation("BestEconomy", fields: [bestEconomyPlayerId], references: [id])
  mostManOfTheMatchPlayer User? @relation("MostManOfTheMatch", fields: [mostManOfTheMatchPlayerId], references: [id])

  @@map("team_statistics")
}

enum MatchStatus {
  UPCOMING    @map("upcoming")
  ONGOING     @map("ongoing")
  COMPLETED   @map("completed")
  CANCELLED   @map("cancelled")
}

enum MatchResult {
  HOME_WIN    @map("home_win")
  AWAY_WIN    @map("away_win")
  DRAW        @map("draw")
}

enum InvitationStatus {
  PENDING  @map("pending")
  ACCEPTED @map("accepted")
  REJECTED @map("rejected")
}

model LocalMatch {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  creatorId             String   @db.ObjectId
  matchName             String
  venue                 String
  matchDate             DateTime
  overs                 Int      @default(20)
  myTeamName            String?
  myTeamId              String?  @db.ObjectId
  opponentTeamName      String?
  opponentTeamId        String?  @db.ObjectId
  myTeamPlayers         Json     // Array of LocalPlayer objects
  opponentTeamPlayers   Json     // Array of LocalPlayer objects
  allowSpectators       Boolean  @default(false)
  status                LocalMatchStatus @default(CREATED)
  currentInnings        Int      @default(1)
  currentOver           Int      @default(0)
  currentBall           Int      @default(0)
  // Live scoring data
  myTeamScore           Int      @default(0)
  myTeamWickets         Int      @default(0)
  myTeamOvers           Float    @default(0)
  opponentTeamScore     Int      @default(0)
  opponentTeamWickets   Int      @default(0)
  opponentTeamOvers     Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  creator               User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  myTeam                Team?    @relation("LocalMatchMyTeam", fields: [myTeamId], references: [id])
  opponentTeam          Team?    @relation("LocalMatchOpponentTeam", fields: [opponentTeamId], references: [id])
  spectators            MatchSpectator[]
  overHistory           OverHistory[]

  @@map("local_matches")
}

model MatchSpectator {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  localMatchId  String   @db.ObjectId
  userId        String   @db.ObjectId
  addedBy       String   @db.ObjectId
  addedAt       DateTime @default(now())
  notified      Boolean  @default(false)

  // Relations
  localMatch    LocalMatch @relation(fields: [localMatchId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  addedByUser   User       @relation("SpectatorAddedBy", fields: [addedBy], references: [id])

  @@unique([localMatchId, userId])
  @@map("match_spectators")
}

model OverHistory {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  localMatchId  String   @db.ObjectId
  overNumber    Int
  innings       Int      // 1 or 2
  balls         Json     // Array of ball-by-ball data
  totalRuns     Int      @default(0)
  wickets       Int      @default(0)
  createdAt     DateTime @default(now())

  // Relations
  localMatch    LocalMatch @relation(fields: [localMatchId], references: [id], onDelete: Cascade)

  @@map("over_history")
}

enum LocalMatchStatus {
  CREATED     @map("created")
  ONGOING     @map("ongoing")
  COMPLETED   @map("completed")
  CANCELLED   @map("cancelled")
}

model MatchSummary {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  matchDate                DateTime
  venue                    String
  
  // Team information
  homeTeamName             String
  homeTeamId               String?  @db.ObjectId
  awayTeamName             String
  awayTeamId               String?  @db.ObjectId
  
  // Match result
  result                   MatchResult
  winningTeam              String
  
  // Innings scores
  firstInningsTeam         String
  firstInningsRuns         Int
  firstInningsWickets      Int
  firstInningsOvers        Float
  
  secondInningsTeam        String
  secondInningsRuns        Int
  secondInningsWickets     Int
  secondInningsOvers       Float
  
  // Match context
  target                   Int?
  totalOvers               Int      @default(20)
  
  // Man of the match
  manOfTheMatchPlayerName  String?
  manOfTheMatchUserId      String?  @db.ObjectId
  manOfTheMatchStats       Json?    // Performance stats
  
  // Complete player data (JSON)
  firstInningsBatsmen      Json     // Array of batting stats
  firstInningsBowlers      Json     // Array of bowling stats
  secondInningsBatsmen     Json     // Array of batting stats
  secondInningsBowlers     Json     // Array of bowling stats
  
  createdAt                DateTime @default(now())
  
  // Relations
  homeTeam                 Team?    @relation("MatchSummaryHomeTeam", fields: [homeTeamId], references: [id])
  awayTeam                 Team?    @relation("MatchSummaryAwayTeam", fields: [awayTeamId], references: [id])
  manOfTheMatchUser        User?    @relation("MatchSummaryManOfTheMatch", fields: [manOfTheMatchUserId], references: [id])
  playerHistory            PlayerMatchHistory[]
  
  @@map("match_summaries")
}

model PlayerMatchHistory {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  matchSummaryId String   @db.ObjectId
  teamName       String   // which team they played for
  teamId         String?  @db.ObjectId
  playerName     String
  
  // Performance summary
  runsScored       Int    @default(0)
  ballsFaced       Int    @default(0)
  wicketsTaken     Int    @default(0)
  oversBowled      Float  @default(0)
  isManOfTheMatch  Boolean @default(false)
  
  createdAt      DateTime @default(now())
  
  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchSummary   MatchSummary @relation(fields: [matchSummaryId], references: [id], onDelete: Cascade)
  team           Team?        @relation("PlayerMatchHistoryTeam", fields: [teamId], references: [id])
  
  @@unique([userId, matchSummaryId])
  @@map("player_match_history")
}